= Grails 90 Minute Workshop
==========
:Author:    Tim Berglund
:Email:     <tim.berglund@augusttechgroup.com>

== Requirements

For this workshop, you will need:

 * A laptop
 * Permissions to copy files and unzip files on your system
 * The ability to create and modify environment variables
 * A text editor 
 * A command prompt

== Setup

You should have four ZIP files in your possession:

 * grails-2.0.0.RC2.zip
 * grails-docs-2.0.0.RC2.zip
 * groovy-binary-1.8.4.zip
 * groovy-docs-1.8.4.zip

Follow these steps to get set up for the workshop:

1. Unzip `grails-2.0.0.RC2.zip` into a directory of your choosing.
2. Unzip `grails-docs-2.0.0.RC2.zip` into a directory called `docs`, then move it under your Grails directory.
3. Create an environment variable called GRAILS_HOME, and set it to your Grails directory.
4. Add `$GRAILS_HOME/bin` (or `%GRAILS_HOME\bin` on Windows) to your PATH.
5. Unzip the two Groovy files into a directory of your choosing.
6. Create an environment variable called GROOVY_HOME, and set it to the directory where you unzipped Groovy.
7. Add `$GROOVY_HOME/bin` (or `%GROOVYLS_HOME\bin` on Windows) to your PATH.
8. Choose a working directory on your system where you'll be building your Grails app.

== Lab Instructions 

=== Creating an app

1. Run the `grails create-app poetry` command to create the poetry app.
2. Explore the directory structure and become familiar with the kinds of files Grails has generated.
3. Run Grails in interactive mode by executing the `grails` command from project root directory.
4. Run the Grails app by typing `run-app` at the Grails console. 
5. Go to `http://localhost:8080/poetry` in your browser, then explore the app. (There's not much to it yet!) 
6. Quit the application by typing `exit` at the console.

=== Creating a Domain Model

1. Create a domain class called `Poem` using the `create-domain-class` command at the Grails console.
2. Create a domain class called `Poet` the same way.
3. Give each class appropriate fields for expressing each kind of entity.
4. Be sure to set a constraint on the poem text field, giving it a large size.
5. Create dynamic scaffolding for each class. Remember:
  * `grails create-controller Poet`
  * `def scaffold = true`
6. Change the database URL in `DataSource` to `jdbc:h2:db/grails_workshop;FILE_LOCK=NO`.
7. Change the `dbCreate` to `update`.

=== Creating Static Scaffolding
1. Run `grails generate-all com.nofluff.Poet`. Observe the files that get generated.
2. Re-run the application to ensure that you can still create and edit poems and poets.

=== Domain Validation
1. Add a constraint to at least one field saying that it can be null.
2. Constrain a field to a list of values with the `inList` constraint.
3. Try violating a constraint in the UI and observe the result.

=== Controllers
1. Add an action to the poem controller that returns the word count of a poem. The action should return a new view of its own containing only the name and word count of the poem. 
 * HINT: `poemText.split().size()`
